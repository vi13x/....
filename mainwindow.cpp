#include "mainwindow.h"
#include <QVBoxLayout>
#include <QHBoxLayout>
#include <QGroupBox>
#include <QFormLayout>
#include <QFileDialog>
#include <QMessageBox>
#include <QJsonArray>
#include <QJsonObject>
#include <QJsonDocument>
#include <QFile>
#include <QHeaderView>
#include <QDateTime>
#include <cmath>
#include <QLabel>
#include <QFrame>
#include <QStatusBar>

// === –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä ===
MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent)
{
    resize(1200, 800);
    setWindowTitle("–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö");

    QWidget *central = new QWidget(this);
    setCentralWidget(central);

    QHBoxLayout *mainLayout = new QHBoxLayout(central);
    mainLayout->setSpacing(15);
    mainLayout->setContentsMargins(15, 15, 15, 15);

    // === –õ–ï–í–ê–Ø –ü–ê–ù–ï–õ–¨ (–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö) ===
    QFrame *leftPanel = new QFrame;
    leftPanel->setFrameStyle(QFrame::StyledPanel);
    leftPanel->setStyleSheet("QFrame { background-color: #f8f9fa; border-radius: 8px; }");

    QVBoxLayout *leftLayout = new QVBoxLayout(leftPanel);
    leftLayout->setSpacing(12);

    // –ì—Ä—É–ø–ø–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
    QGroupBox *inputGroup = new QGroupBox("–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π");
    inputGroup->setStyleSheet("QGroupBox { font-weight: bold; }");

    QFormLayout *formLayout = new QFormLayout;
    formLayout->setSpacing(10);
    formLayout->setLabelAlignment(Qt::AlignRight);

    dateTimeEdit = new QDateTimeEdit(QDateTime::currentDateTime());
    dateTimeEdit->setCalendarPopup(true);
    dateTimeEdit->setDisplayFormat("yyyy-MM-dd HH:mm");
    dateTimeEdit->setStyleSheet("QDateTimeEdit { padding: 5px; }");
    formLayout->addRow("–î–∞—Ç–∞/–≤—Ä–µ–º—è:", dateTimeEdit);

    radiationSpin = new QDoubleSpinBox;
    radiationSpin->setRange(0, 20000);
    radiationSpin->setDecimals(2);
    radiationSpin->setSuffix(" –í—Ç/–º¬≤");
    radiationSpin->setStyleSheet("QDoubleSpinBox { padding: 5px; }");
    formLayout->addRow("–°–æ–ª–Ω–µ—á–Ω–∞—è —Ä–∞–¥–∏–∞—Ü–∏—è:", radiationSpin);

    temperatureSpin = new QDoubleSpinBox;
    temperatureSpin->setRange(-100, 100);
    temperatureSpin->setDecimals(2);
    temperatureSpin->setSuffix(" ¬∞C");
    temperatureSpin->setStyleSheet("QDoubleSpinBox { padding: 5px; }");
    formLayout->addRow("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:", temperatureSpin);

    humiditySpin = new QDoubleSpinBox;
    humiditySpin->setRange(0, 100);
    humiditySpin->setDecimals(2);
    humiditySpin->setSuffix(" %");
    humiditySpin->setStyleSheet("QDoubleSpinBox { padding: 5px; }");
    formLayout->addRow("–í–ª–∞–∂–Ω–æ—Å—Ç—å:", humiditySpin);

    pressureSpin = new QDoubleSpinBox;
    pressureSpin->setRange(300, 1200);
    pressureSpin->setDecimals(2);
    pressureSpin->setSuffix(" –≥–ü–∞");
    pressureSpin->setStyleSheet("QDoubleSpinBox { padding: 5px; }");
    formLayout->addRow("–î–∞–≤–ª–µ–Ω–∏–µ:", pressureSpin);

    windSpin = new QDoubleSpinBox;
    windSpin->setRange(0, 200);
    windSpin->setDecimals(2);
    windSpin->setSuffix(" –º/—Å");
    windSpin->setStyleSheet("QDoubleSpinBox { padding: 5px; }");
    formLayout->addRow("–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞:", windSpin);

    uvSpin = new QDoubleSpinBox;
    uvSpin->setRange(0, 30);
    uvSpin->setDecimals(2);
    uvSpin->setStyleSheet("QDoubleSpinBox { padding: 5px; }");
    formLayout->addRow("–£–§-–∏–Ω–¥–µ–∫—Å:", uvSpin);

    inputGroup->setLayout(formLayout);
    leftLayout->addWidget(inputGroup);

    // –ö–Ω–æ–ø–∫–∏
    QPushButton *btnAdd = new QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å");
    QPushButton *btnAnalyze = new QPushButton("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ");
    QPushButton *btnSave = new QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å JSON");
    QPushButton *btnLoad = new QPushButton("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å JSON");

    // –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫
    QString buttonStyle = "QPushButton { padding: 10px; font-weight: bold; border-radius: 5px; }";
    btnAdd->setStyleSheet(buttonStyle + "QPushButton { background-color: #4CAF50; color: white; }");
    btnAnalyze->setStyleSheet(buttonStyle + "QPushButton { background-color: #2196F3; color: white; }");
    btnSave->setStyleSheet(buttonStyle + "QPushButton { background-color: #FF9800; color: white; }");
    btnLoad->setStyleSheet(buttonStyle + "QPushButton { background-color: #9C27B0; color: white; }");

    connect(btnAdd, &QPushButton::clicked, this, &MainWindow::addRecord);
    connect(btnAnalyze, &QPushButton::clicked, this, &MainWindow::analyzeData);
    connect(btnSave, &QPushButton::clicked, this, &MainWindow::saveToJson);
    connect(btnLoad, &QPushButton::clicked, this, &MainWindow::loadFromJson);

    leftLayout->addWidget(btnAdd);
    leftLayout->addWidget(btnAnalyze);
    leftLayout->addWidget(btnSave);
    leftLayout->addWidget(btnLoad);
    leftLayout->addStretch();

    // === –ü–†–ê–í–ê–Ø –ü–ê–ù–ï–õ–¨ (–¢–∞–±–ª–∏—Ü–∞ + –ê–Ω–∞–ª–∏–∑) ===
    QVBoxLayout *rightLayout = new QVBoxLayout;
    rightLayout->setSpacing(15);

    // –¢–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö
    QGroupBox *tableGroup = new QGroupBox("–¢–∞–±–ª–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏–π");
    tableGroup->setStyleSheet("QGroupBox { font-weight: bold; }");

    QVBoxLayout *tableLayout = new QVBoxLayout;

    table = new QTableWidget(0, 7);
    QStringList headers = {"–î–∞—Ç–∞/–≤—Ä–µ–º—è", "–†–∞–¥–∏–∞—Ü–∏—è (–í—Ç/–º¬≤)", "–¢–µ–º–ø. (¬∞C)", "–í–ª–∞–∂–Ω–æ—Å—Ç—å (%)", "–î–∞–≤–ª–µ–Ω–∏–µ (–≥–ü–∞)", "–í–µ—Ç–µ—Ä (–º/—Å)", "UV"};
    table->setHorizontalHeaderLabels(headers);
    table->horizontalHeader()->setSectionResizeMode(QHeaderView::Stretch);
    table->setAlternatingRowColors(true);
    table->setSelectionBehavior(QAbstractItemView::SelectRows);
    table->setEditTriggers(QAbstractItemView::NoEditTriggers);
    table->setStyleSheet(
        "QTableWidget { gridline-color: #ddd; }"
        "QHeaderView::section { background-color: #e3e3e3; padding: 5px; border: 1px solid #ccc; }"
        );

    tableLayout->addWidget(table);
    tableGroup->setLayout(tableLayout);
    rightLayout->addWidget(tableGroup, 7);

    // –ü–∞–Ω–µ–ª—å –∞–Ω–∞–ª–∏–∑–∞
    QGroupBox *analysisBox = new QGroupBox("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞");
    analysisBox->setStyleSheet("QGroupBox { font-weight: bold; }");

    QVBoxLayout *analysisLayout = new QVBoxLayout;
    analysisText = new QPlainTextEdit;
    analysisText->setReadOnly(true);
    analysisText->setStyleSheet(
        "QPlainTextEdit { background-color: #f8f9fa; border: 1px solid #ddd; border-radius: 5px; padding: 10px; }"
        );
    analysisText->setPlaceholderText("–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö...");

    analysisLayout->addWidget(analysisText);
    analysisBox->setLayout(analysisLayout);
    rightLayout->addWidget(analysisBox, 3);

    // === –ò—Ç–æ–≥–æ–≤—ã–π Layout ===
    mainLayout->addWidget(leftPanel, 3);
    mainLayout->addLayout(rightLayout, 7);

    // –°—Ç–∞—Ç—É—Å –±–∞—Ä
    statusBar()->showMessage("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ");
}

// === –î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä ===
MainWindow::~MainWindow() = default;

// === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ ===
void MainWindow::addRecord()
{
    int row = table->rowCount();
    table->insertRow(row);

    table->setItem(row, 0, new QTableWidgetItem(dateTimeEdit->dateTime().toString("yyyy-MM-dd HH:mm")));
    table->setItem(row, 1, new QTableWidgetItem(QString::number(radiationSpin->value(), 'f', 2)));
    table->setItem(row, 2, new QTableWidgetItem(QString::number(temperatureSpin->value(), 'f', 2)));
    table->setItem(row, 3, new QTableWidgetItem(QString::number(humiditySpin->value(), 'f', 2)));
    table->setItem(row, 4, new QTableWidgetItem(QString::number(pressureSpin->value(), 'f', 2)));
    table->setItem(row, 5, new QTableWidgetItem(QString::number(windSpin->value(), 'f', 2)));
    table->setItem(row, 6, new QTableWidgetItem(QString::number(uvSpin->value(), 'f', 2)));

    statusBar()->showMessage(QString("–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å ‚Ññ%1").arg(row + 1), 3000);
}

// === –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö ===
void MainWindow::analyzeData()
{
    int rows = table->rowCount();
    if (rows == 0) {
        QMessageBox::information(this, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∑–∞–ø–∏—Å–∏.");
        statusBar()->showMessage("–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞");
        return;
    }

    QVector<double> temps; temps.reserve(rows);
    QVector<double> rads; rads.reserve(rows);
    QVector<double> uvs; uvs.reserve(rows);
    QVector<double> humidities; humidities.reserve(rows);
    QVector<double> pressures; pressures.reserve(rows);
    QVector<double> winds; winds.reserve(rows);

    for (int i = 0; i < rows; ++i) {
        temps.append(table->item(i, 2)->text().toDouble());
        rads.append(table->item(i, 1)->text().toDouble());
        uvs.append(table->item(i, 6)->text().toDouble());
        humidities.append(table->item(i, 3)->text().toDouble());
        pressures.append(table->item(i, 4)->text().toDouble());
        winds.append(table->item(i, 5)->text().toDouble());
    }

    auto mean = [](const QVector<double>& v)->double {
        if (v.isEmpty()) return 0.0;
        double s = 0;
        for (double x : v) s += x;
        return s / v.size();
    };

    auto max = [](const QVector<double>& v)->double {
        if (v.isEmpty()) return 0.0;
        double m = v[0];
        for (double x : v) if (x > m) m = x;
        return m;
    };

    auto min = [](const QVector<double>& v)->double {
        if (v.isEmpty()) return 0.0;
        double m = v[0];
        for (double x : v) if (x < m) m = x;
        return m;
    };

    auto stddev = [&](const QVector<double>& v)->double {
        if (v.isEmpty()) return 0.0;
        double m = mean(v);
        double s = 0;
        for (double x : v) s += (x - m) * (x - m);
        return std::sqrt(s / v.size());
    };

    QString result;
    result += QString("üìä –ê–ù–ê–õ–ò–ó –ü–û–ì–û–î–ù–´–• –î–ê–ù–ù–´–•\n");
    result += QString("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n");
    result += QString("üìà –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: %1\n\n").arg(rows);

    result += QString("üå°Ô∏è  –¢–ï–ú–ü–ï–†–ê–¢–£–†–ê:\n");
    result += QString("   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ: %1 ¬∞C\n").arg(mean(temps), 0, 'f', 2);
    result += QString("   ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: %1 ¬∞C\n").arg(min(temps), 0, 'f', 2);
    result += QString("   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: %1 ¬∞C\n").arg(max(temps), 0, 'f', 2);
    result += QString("   ‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: %1\n\n").arg(stddev(temps), 0, 'f', 2);

    result += QString("‚òÄÔ∏è  –°–û–õ–ù–ï–ß–ù–ê–Ø –†–ê–î–ò–ê–¶–ò–Ø:\n");
    result += QString("   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è: %1 –í—Ç/–º¬≤\n").arg(mean(rads), 0, 'f', 2);
    result += QString("   ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: %1 –í—Ç/–º¬≤\n").arg(min(rads), 0, 'f', 2);
    result += QString("   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: %1 –í—Ç/–º¬≤\n").arg(max(rads), 0, 'f', 2);
    result += QString("   ‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: %1\n\n").arg(stddev(rads), 0, 'f', 2);

    result += QString("üü£ –£–§-–ò–ù–î–ï–ö–°:\n");
    result += QString("   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π: %1\n").arg(mean(uvs), 0, 'f', 2);
    result += QString("   ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π: %1\n").arg(min(uvs), 0, 'f', 2);
    result += QString("   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π: %1\n").arg(max(uvs), 0, 'f', 2);
    result += QString("   ‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: %1\n\n").arg(stddev(uvs), 0, 'f', 2);

    result += QString("üíß –í–õ–ê–ñ–ù–û–°–¢–¨:\n");
    result += QString("   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è: %1%%\n").arg(mean(humidities), 0, 'f', 2);
    result += QString("   ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: %1%%\n").arg(min(humidities), 0, 'f', 2);
    result += QString("   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: %1%%\n").arg(max(humidities), 0, 'f', 2);
    result += QString("   ‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: %1\n\n").arg(stddev(humidities), 0, 'f', 2);

    analysisText->setPlainText(result);
    statusBar()->showMessage(QString("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ %1 –∑–∞–ø–∏—Å–µ–π").arg(rows), 5000);
}

// === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ JSON ===
void MainWindow::saveToJson()
{
    if (table->rowCount() == 0) {
        QMessageBox::warning(this, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞. –ù–µ—á–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å.");
        statusBar()->showMessage("–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è");
        return;
    }

    QString fileName = QFileDialog::getSaveFileName(this, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", "", "JSON —Ñ–∞–π–ª—ã (*.json)");
    if (fileName.isEmpty()) return;

    QJsonArray records;
    for (int i = 0; i < table->rowCount(); i++) {
        QJsonObject obj;
        obj["datetime"] = table->item(i, 0)->text();
        obj["radiation"] = table->item(i, 1)->text().toDouble();
        obj["temperature"] = table->item(i, 2)->text().toDouble();
        obj["humidity"] = table->item(i, 3)->text().toDouble();
        obj["pressure"] = table->item(i, 4)->text().toDouble();
        obj["wind"] = table->item(i, 5)->text().toDouble();
        obj["uv"] = table->item(i, 6)->text().toDouble();
        records.append(obj);
    }

    QJsonDocument doc(records);
    QFile file(fileName);
    if (!file.open(QIODevice::WriteOnly)) {
        QMessageBox::warning(this, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏.");
        statusBar()->showMessage("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞");
        return;
    }
    file.write(doc.toJson(QJsonDocument::Indented));
    file.close();

    QMessageBox::information(this, "–£—Å–ø–µ—Ö", QString("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª:\n%1").arg(fileName));
    statusBar()->showMessage(QString("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: %1").arg(fileName), 5000);
}

// === –ó–∞–≥—Ä—É–∑–∫–∞ JSON ===
void MainWindow::loadFromJson()
{
    QString fileName = QFileDialog::getOpenFileName(this, "–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", "", "JSON —Ñ–∞–π–ª—ã (*.json)");
    if (fileName.isEmpty()) return;

    QFile file(fileName);
    if (!file.open(QIODevice::ReadOnly)) {
        QMessageBox::warning(this, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª.");
        statusBar()->showMessage("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞");
        return;
    }

    QJsonDocument doc = QJsonDocument::fromJson(file.readAll());
    file.close();

    if (!doc.isArray()) {
        QMessageBox::warning(this, "–û—à–∏–±–∫–∞", "–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –Ω–µ–≤–µ—Ä–Ω—ã–π. –û–∂–∏–¥–∞–ª—Å—è –º–∞—Å—Å–∏–≤ JSON.");
        statusBar()->showMessage("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON");
        return;
    }

    QJsonArray records = doc.array();
    table->setRowCount(0);

    for (auto v : records) {
        QJsonObject obj = v.toObject();
        int row = table->rowCount();
        table->insertRow(row);

        table->setItem(row, 0, new QTableWidgetItem(obj.value("datetime").toString()));
        table->setItem(row, 1, new QTableWidgetItem(QString::number(obj.value("radiation").toDouble(), 'f', 2)));
        table->setItem(row, 2, new QTableWidgetItem(QString::number(obj.value("temperature").toDouble(), 'f', 2)));
        table->setItem(row, 3, new QTableWidgetItem(QString::number(obj.value("humidity").toDouble(), 'f', 2)));
        table->setItem(row, 4, new QTableWidgetItem(QString::number(obj.value("pressure").toDouble(), 'f', 2)));
        table->setItem(row, 5, new QTableWidgetItem(QString::number(obj.value("wind").toDouble(), 'f', 2)));
        table->setItem(row, 6, new QTableWidgetItem(QString::number(obj.value("uv").toDouble(), 'f', 2)));
    }

    QMessageBox::information(this, "–£—Å–ø–µ—Ö", QString("–ó–∞–≥—Ä—É–∂–µ–Ω–æ %1 –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ñ–∞–π–ª–∞:\n%2").arg(records.size()).arg(fileName));
    statusBar()->showMessage(QString("–ó–∞–≥—Ä—É–∂–µ–Ω–æ %1 –∑–∞–ø–∏—Å–µ–π –∏–∑ %2").arg(records.size()).arg(fileName), 5000);
}
